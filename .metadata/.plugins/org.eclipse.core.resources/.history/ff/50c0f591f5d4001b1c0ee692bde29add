package br.com.monkey.bo;

public class MainTest
{
    private static int M, N;
 
    // Function to check whether `(i, x)` and `(i, y)` are valid matrix coordinates
    public static boolean isValid(int i, int x, int y) {
        return i < M && x >= 0 && x < N && y >= 0 && y < N;
    }
    
    public static boolean isValid(int i, int x) {
        return i < M && x >= 0 && x > N;
    }
    
    private static int vezes = 0;
    // Collect maximum coins from cell `(i, x)` to cell `(M-1, 0)` and from
    // cell `(i, y)` to cell `(M-1, N-1)`
    public static int getMaxCoins(int[][] mat, int i, int x, int y)
    {
    	System.out.println("Quantidade de vezes que passou" +vezes);
    	vezes++;
        // return if either `(i, x)` or `(i, y)` is invalid
        if (!isValid(i, x, y)) {
            return Integer.MIN_VALUE;
        }
 
        // current row is the last row
        if (i == M - 1)
        {
            // destination reached
            if (x == 0 && y == N - 1) {
                return (x == y) ? mat[i][x] : mat[i][x] + mat[i][y];
            }
 
            // destination not reached
            return Integer.MIN_VALUE;
        }
 
        // stores the max number of coins
        int coins = Integer.MIN_VALUE;
 
        /* Recur for all possible ways:
        `(i, x)` —> `(i+1, x-1)` or `(i+1, x)` or `(i+1, x+1)`
        `(i, y)` —> `(i+1, y-1)` or `(i+1, y)` or `(i+1, y+1)` */
 
        coins = Math.max(coins, getMaxCoins(mat, i + 1, x - 1, y - 1));
        coins = Math.max(coins, getMaxCoins(mat, i + 1, x - 1, y));
        coins = Math.max(coins, getMaxCoins(mat, i + 1, x - 1, y + 1));
 
        coins = Math.max(coins, getMaxCoins(mat, i + 1, x, y - 1));
        coins = Math.max(coins, getMaxCoins(mat, i + 1, x, y));
        coins = Math.max(coins, getMaxCoins(mat, i + 1, x, y + 1));
 
        coins = Math.max(coins, getMaxCoins(mat, i + 1, x + 1, y - 1));
        coins = Math.max(coins, getMaxCoins(mat, i + 1, x + 1, y));
        coins = Math.max(coins, getMaxCoins(mat, i + 1, x + 1, y + 1));
 
        // update max number of coins with current cell coins before returning
        if (x == y) {
            return mat[i][x] + coins;
        }
        else {
            return (mat[i][x] + mat[i][y]) + coins;
        }
    }
    
    public static int getMaxBananas(int[][] mat, int i, int x)
    {
    	
    	// Retorna se algum desses for inavalido (i, x)
    	if (!isValid(i, x)) {
    		return Integer.MIN_VALUE;
    	}
    	System.out.println("Quantidade de vezes que passou" +vezes);
    	vezes++;

    	// A linha atual é aultima
    	if (i == M - 1)
    	{
    		// destination reached
    		if (x == N -1) {
    			return mat[i][x] ;
    		}

    		// destination not reached
    		return Integer.MIN_VALUE;
    	}

    	// stores the max number of coins
    	int bananas = Integer.MIN_VALUE;

    	/* Recur for all possible ways:
    	`(i, x)` —> `(i+1, x-1)` or `(i+1, x)` or `(i+1, x+1)`
    	`(i, y)` —> `(i+1, y-1)` or `(i+1, y)` or `(i+1, y+1)` */


    	bananas = Math.max(bananas, getMaxBananas(mat, i + 1, x + 1));
    	bananas = Math.max(bananas, getMaxBananas(mat, i + 1, x - 1));
    	bananas = Math.max(bananas, getMaxBananas(mat, i + 1, x));

    	bananas = Math.max(bananas, getMaxBananas(mat, i , x + 1));
    	bananas = Math.max(bananas, getMaxBananas(mat, i , x - 1));
    	bananas = Math.max(bananas, getMaxBananas(mat, i , x ));
    	

    	bananas = Math.max(bananas, getMaxBananas(mat, i-  1 , x + 1));
    	bananas = Math.max(bananas, getMaxBananas(mat, i - 1 , x - 1));
    	bananas = Math.max(bananas, getMaxBananas(mat, i - 1 , x ));

    	
    	return mat[i][x] + bananas;
    	
    }
 
    public static void main(String[] args)
    {
        int[][] mat =
        {
            { 1, 3, 1, 5 },
            { 2, 2, 3, 1 },
            { 5, 0, 6, 3 },
            { 0, 6, 8, 2 },
        };
 
        M = mat.length;
        N = mat[0].length;
 
        // start with cell `(0, 0)` and `(0, N-1)`
       // System.out.println("The maximum coins collected is " +
         //                   getMaxCoins(mat, 0, 0, N - 1));
        System.out.println("The maximum coins collected is " +
        		getMaxBananas(mat, 0, 0, N - 1));

        
    }
}